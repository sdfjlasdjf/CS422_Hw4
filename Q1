module SIMPLE-UNTYPED-SYNTAX
  imports DOMAINS-SYNTAX

  syntax AExp  ::= Int | Id
                 | "-" Int
                 | AExp "/" AExp              [left, strict]
                 | "(" AExp ")"               [bracket]
                 > AExp "+" AExp              [left, strict]

  syntax BExp  ::= Bool
                 | AExp "<=" AExp             [seqstrict]
                 | "!" BExp                   [strict]
                 | "(" BExp ")"               [bracket]
                 > BExp "&&" BExp             [left, strict(1)]

  syntax Block ::= "{" "}"
                 | "{" Stmt "}"

  syntax Stmt  ::= Block
                 | Id "=" AExp ";"            [strict(2)]
                 | "if" "(" BExp ")" Block "else" Block  [strict(1)]
                 | "while" "(" BExp ")" Block
                 | "break" ";"
                 | "continue" ";"
                 > Stmt Stmt                  [left]

  syntax Pgm ::= "int" Ids ";" Stmt
  syntax Ids ::= List{Id,","}
endmodule


module SIMPLE-UNTYPED
  imports SIMPLE-UNTYPED-SYNTAX
  imports DOMAINS

  syntax KResult ::= Int | Bool
  syntax KItem ::= "undefined"

  configuration <T color="red">
                  <threads color="orange">
                    <thread multiplicity="*" type="Map">
                      <k color="green"> $PGM:Pgm </k>
                      <control color="cyan">
                        <fstack color="blue"> .List </fstack>
                        <xstack color="purple"> .List </xstack>
                        <loopstack color="LimeGreen"> .List </loopstack>
                      </control>
                      <env color="violet"> .Map </env>
                      <holds color="black"> .Map </holds>
                    </thread>
                  </threads>
                  <genv color="pink"> .Map </genv>
                  <store color="white"> .Map </store>
                  <busy color="cyan"> .Set </busy>
                  <state> .Map </state>
                  <terminated color="red"> .Set </terminated>
                  <input color="magenta" stream="stdin"> .List </input>
                  <output color="brown" stream="stdout"> .List </output>
                  <nextLoc color="gray"> 0 </nextLoc>
                </T>

  // AExp
  rule <k> X:Id => I ...</k> <state>... X |-> I ...</state> requires isInt(I)
  rule I1 / I2 => I1 /Int I2 requires I2 =/=Int 0
  rule I1 + I2 => I1 +Int I2
  rule - I1 => 0 -Int I1

  // BExp
  rule I1 <= I2 => I1 <=Int I2
  rule ! T => notBool T
  rule true && B => B
  rule false && _ => false

  // Block
  rule {} => .K
  rule {S} => S

  // Stmt
  rule S1:Stmt S2:Stmt => S1 ~> S2

  // Assignments
  rule <k> X = I:Int; => .K ...</k> <state>... X |-> (_ => I) ...</state>

  // If-else
  rule if (true)  S else _ => S
  rule if (false) _ else S => S

  // While loops
  // Introduce a loop marker when expanding while loops
  syntax KItem ::= "LOOPMARK"
  rule <k> while (B) S => pushLoop(B,S) ...</k>
  
  syntax KItem ::= "#pushLoop"
  syntax KItem ::= pushLoop(BExp, Block) [function]
  rule pushLoop(B,S) => #pushLoop ~> if(B){ S while(B)S } else {}
  
  // #pushLoop adds a marker to the loopstack
  rule <k> #pushLoop => .K ...</k> <control>... <loopstack> LS => LOOPMARK LS </loopstack> </control>


  // break;
  // On break, we must remove the innermost LOOPMARK and skip out of the current loop structure.
  // The loop structure is: if(B) { S while(B)S } else {}
  // break should rewrite to skip directly to the else branch.
  rule <k> break; => #breakFound ...</k>
  syntax KItem ::= "#breakFound"
  rule <k> #breakFound => .K ...</k>
       <control> <loopstack> LOOPMARK LS => LS </loopstack> </control>


  // We'll implement a search using a heating/cooling-like technique:
  syntax KItem ::= breakLoop(BExp, Block)
  // If we reach an upper level while(B)S expansion:
  rule <k> while(B) S => {} ...</k> <k> breakLoop(B, S) => .K </k>

  // If break occurs inside a sequence of statements:
  rule break; => breakLoop(_,_) [owise]


  // We'll do a trick: whenever we see break, we raise a special symbol that bubble up and rewrite the parent's while structure:
  syntax KItem ::= "BREAK-LOOP"
  rule <k> break; => BREAK-LOOP ...</k>

  // On encountering BREAK-LOOP while looking at a while expansion:
  rule <k> S while(B) S' => {} ...</k> <k> BREAK-LOOP => .K ...</k>
       <control><loopstack>LOOPMARK LS => LS</loopstack></control>

  // If BREAK-LOOP goes up and no loop found:
  rule <k> BREAK-LOOP => .K ...</k> [owise]
    // If no loop marker is found, stuck.

  // continue;
  // Similar to break, continue should jump to the next iteration of the loop.
  rule <k> continue; => CONTINUE-LOOP ...</k>
  syntax KItem ::= "CONTINUE-LOOP"
  // On continue, we skip the rest of S and jump back to check condition B of while.
  rule <k> S while(B) S' => while(B) S' ...</k> <k> CONTINUE-LOOP => .K ...</k>
    // If no loop marker is found for continue:
  rule <k> CONTINUE-LOOP => .K ...</k> [owise]

  // If-else
  rule if (true) S else _ => S
  rule if (false) _ else S => S


  // Pgm
  syntax KItem ::= "undefined"
  rule <k> int (X,Xs => Xs);_ </k> <state> Rho:Map (.Map => X|->undefined) </state>
    requires notBool (X in keys(Rho))
  rule int .Ids; S => S
  // no other changes needed
endmodule
