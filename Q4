module SIMPLE-TYPED-STATIC-REDECL
  imports SIMPLE-TYPED-STATIC-EXCEPTIONS
  imports DOMAINS-SYNTAX


  // Extend the variable declaration to include a check for redeclaration
  syntax Stmt ::= "declareVar" "(" Type "," Id ")" [function]
  
  // Rule for declaring a variable within the current tenv
  rule <k> declareVar(T, X) => addVar(T, X) ...</k>
       <tenv> Rho </tenv>
    requires notBool(X in keys(Rho))
    =>
      // Add variable to the type environment
      addVar(T, X)
  
  // Define addVar helper function
  syntax Stmt ::= "addVar" "(" Type "," Id ")" [function]
  
  rule addVar(T, X) => .K
       <tenv> Rho => Rho[X <- T] </tenv>
       <store>... .Map => L |-> undefined(T) ...</store>
       <nextLoc> L:Int => L +Int 1 </nextLoc>
  
  // If redeclaration occurs, no rule matches, and the type checker gets stuck

  // Modify block rule to handle local environments
  rule <k> { S } => pushLocalEnv ~> S ~> popLocalEnv ...</k>
       <tenv> Rho </tenv>
    =>
      // Push a new local environment, possibly shadowing variables
      pushLocalEnv(Rho)

  // Define pushLocalEnv and popLocalEnv
  syntax KItem ::= "pushLocalEnv" "(" Map ")" [function]
  syntax KItem ::= "popLocalEnv" [function]

  rule <k> pushLocalEnv(Rho) => .K ...</k>
       <control> <tenv> CurrentEnv => Rho </tenv> </control>
  
  rule <k> popLocalEnv => .K ...</k>
       <control> <tenv> PreviousEnv </tenv> </control>
  
  // Modify the block to declare variables using declareVar
  // These are already handled by the declareVar rules above

  // Example for handling declarations inside blocks  
  // Modify the 'declareVar' syntax to be triggered by variable declarations
  rule <k> T:Type X:Id; => declareVar(T, X) ...</k>
       <tenv> Rho </tenv>
    requires notBool(X in keys(Rho))
    =>
      declareVar(T, X)
  
  // If redeclaration occurs, the 'declareVar' rule does not match, and type checker gets stuck
    
endmodule
