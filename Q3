module SIMPLE-TYPED-STATIC-EXCEPTIONS
  imports SIMPLE-TYPED-STATIC 
  imports DOMAINS-SYNTAX

  // Extend syntax to include 'throws' clauses in function declarations
  syntax ParamThrows ::= "throws" TypeList
  syntax ParamsAndThrows ::= Params ParamThrows | Params

  // Define TypeList for listing multiple exception types
  syntax TypeList ::= List{Type,","}

  // Update function declarations to include throws
  syntax Stmt ::= Type Id "(" ParamsAndThrows ")" Block

  // Update function types to include throws
  syntax Type ::= "(" TypeList ")" "->" Type  
                 | "(" Types ")" "->" Type    

  // Update the static semantics configuration to include exception tracking
  syntax FunctionInfo ::= "(" TypeList ")" "->" Type  // (Throws) -> ReturnType
  syntax FunctionEnv ::= Map

  configuration <T>
                      <tasks>
                        <task>
                          <k> $PGM:Pgm </k>
                          <tenv> .Map </tenv>
                          <returnType> void </returnType>
                          <exenv> .Set </exenv> // Track exceptions that can be thrown
                        </task>
                      </tasks>
                      <gtenv> .Map </gtenv> // Global Type Environment: Function Name -> FunctionInfo
                      <store> .Map </store>
                      <busy> .Set </busy>
                      <terminated> .Set </terminated>
                      <input> .List </input>
                      <output> .List </output>
                      <nextLoc> 0 </nextLoc>
                    </T>

  // Function declaration rule with 'throws'
  rule <task> <k> T:Type F:Id(Ps:ParamsAndThrows) S => declareFunction(F, T, Ps, S) ... </k> </task>
       (.Bag => <task>
               <k> declareFunction(F, T, Ps, S) </k>
               <tenv> .Map </tenv>
               <returnType> T </returnType>
               <exenv> .Set </exenv> // Initially, no exceptions
             </task>)
       requires notBool(F in keys(gtenv))
  
  // Define declareFunction helper
  syntax Stmt ::= "declareFunction" "(" Id "," Type "," ParamsAndThrows "," Stmt ")" [function]
  
  rule declareFunction(F, T, Ps, S) => declareFunctionHelper(F, T, Ps, S)
  
  // Helper rule to populate gtenv with function type info
  syntax Stmt ::= "declareFunctionHelper" "(" Id "," Type "," ParamsAndThrows "," Stmt ")" [function]
  
  rule declareFunctionHelper(F, T, Ps, S) => .K
       <gtenv> .Map => F |-> (throwsTypes -> T) </gtenv>
       <tasks> <task> <k> S ~> handleFunctionReturn </k> <tenv> Rho </tenv> <returnType> T </returnType> <exenv> ThrowsList </exenv> </task> </tasks>
    requires
      // Extract throwsTypes from ParamsAndThrows
      ThrowsList = getThrowsList(Ps)
  
  // Extract ThrowsList from ParamsAndThrows
  syntax ThrowsList ::= List{Type,","}
  
  rule getThrowsList(Ps, "throws" Ts) => Ts
  rule getThrowsList(Ps, _) => .List // No throws clause means no exceptions

  // Handle Function Return (simplified for illustration)
  syntax Stmt ::= "handleFunctionReturn"

  rule <k> handleFunctionReturn => .K ... </k>
       <control> ... </control>
       <env> ... </env>
  
  // Modify function calls to include exception handling
  // Assume function calls are expressions like F(args)
  
  rule <k> F(args) => callFunction(F, args) ... </k>
       <env> Env => Env[F <- L] </env>
       <store>... .Map => L |-> lambda(T, Ps, S) ...</store>
       <exenv> CurrentThrows </exenv>
    requires hasFunction(F, ThrowsList -> T)
       && matchFunctionSignature(F, args)
  
  // Define callFunction helper
  syntax Stmt ::= "callFunction" "(" Id "," Vals ")" [function]
  
  rule callFunction(F, Args) => executeFunction(F, Args)
  
  // Execute the function: push a new task with updated exenv
  syntax Stmt ::= "executeFunction" "(" Id "," Vals ")" [function]
  
  rule executeFunction(F, Args) => .K
       <tasks> <task>
                 <k> executeFunctionTask(F, Args) </k>
                 <tenv> declareParameters(Ps, Args) </tenv>
                 <returnType> T </returnType>
                 <exenv> ThrowsList </exenv>
               </task>
             </tasks>
       <gtenv> .Map => ... </gtenv>
    requires
      // Retrieve function info
      FunctionInfo = gtenv[F]
      ThrowsList = throwsTypes(FunctionInfo)
      T = returnType(FunctionInfo)
  
  // Implement executeFunctionTask (simplified)
  syntax Stmt ::= "executeFunctionTask" "(" Id "," Vals ")" [function]
  
  rule executeFunctionTask(F, Args) => S ~> handleFunctionReturn
       <tenv> ... </tenv>
       <exenv> ThrowsList </exenv>
    where
      // Assume 'S' is the function body retrieved from gtenv
      S = getFunctionBody(F)
  
  // Modify throw rule to ensure exceptions are declared or handled
  rule <k> throw V:Val; ~> _ => throwException(V) ... </k>
       <control>
         <xstack> ListItem((T:Type, X:Id, S:Stmt)) ...</xstack>
       </control>
       <env> Env </env>
       requires typeOf(V) ==K T
  
  // Define throwException helper
  syntax Stmt ::= "throwException" "(" Val ")" [function]
  
  rule throwException(V) => handleThrow(V)
  
  // HandleThrow: Check if current function can throw this exception
  syntax Stmt ::= "handleThrow" "(" Val ")" [function]
  
  rule handleThrow(V) => .K
       <exenv> CurrentThrows </exenv>
       requires typeOf(V) in CurrentThrows
       =>
         // Handle the exception or propagate it based on xstack
         if (canHandle(V)) {
           // Execute catch block
         } else {
           // Propagate upward
           .K // stuck or rethrow
         }
  
  // Additional rules and helpers as necessary
  
endmodule
